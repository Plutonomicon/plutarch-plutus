pmatch program
  1.0.0
  (case
     ((\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1)))
        (\!0 !0 ->
           force
             (case
                (constr 0
                   [ !1
                   , (delay (constr 1 []))
                   , (delay
                        ((\!0 !0 -> constr 0 [!2, !1])
                           (force headList !1)
                           (!2 (force tailList !1)))) ])
                [(force (force chooseList))]))
        [1,3,1])
     [(\!0 !0 -> error), error])
phead program
  1.0.0
  (equalsInteger
     1
     ((\!0 -> case !1 [(\!0 !0 -> !2), error])
        ((\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1)))
           (\!0 !0 ->
              force
                (case
                   (constr 0
                      [ !1
                      , (delay (constr 1 []))
                      , (delay
                           ((\!0 !0 -> constr 0 [!2, !1])
                              (force headList !1)
                              (!2 (force tailList !1)))) ])
                   [(force (force chooseList))]))
           [1,2,3,4,5,6,7,8,9,10])))
ptail program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            (\!0 ->
               (\!0 ->
                  (\!0 ->
                     !2
                       (\!0 !0 !0 ->
                          case
                            !2
                            [ (\!0 !0 ->
                                 case
                                   !3
                                   [ (\!0 !0 ->
                                        force
                                          (case
                                             (constr 0
                                                [ (equalsInteger !4 !2)
                                                , (delay (!7 !3 !1))
                                                , (delay False) ])
                                             [(force ifThenElse)]))
                                   , False ])
                            , (case !1 [(\!0 !0 -> False), True]) ])
                       (!1 [2,3,4,5,6,7,8,9,10])
                       ((\!0 -> case !1 [(\!0 !0 -> !1), error])
                          (!1 [1,2,3,4,5,6,7,8,9,10])))
                    (!1
                       (\!0 !0 ->
                          force
                            (case
                               (constr 0
                                  [ !1
                                  , (delay (constr 1 []))
                                  , (delay (!5 (!6 !1) (!2 (!7 !1)))) ])
                               [!4]))))
                 (\!0 ->
                    (\!0 -> !2 (\!0 -> !2 !2 !1))
                      (\!0 -> !2 (\!0 -> !2 !2 !1))))
              (force (force chooseList)))
           (\!0 !0 -> constr 0 [!2, !1]))
        (force headList))
     (force tailList))
pnull.empty program
  1.0.0
  ((\!0 -> case !1 [(\!0 !0 -> False), True])
     ((\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1)))
        (\!0 !0 ->
           force
             (case
                (constr 0
                   [ !1
                   , (delay (constr 1 []))
                   , (delay
                        ((\!0 !0 -> constr 0 [!2, !1])
                           (force headList !1)
                           (!2 (force tailList !1)))) ])
                [(force (force chooseList))]))
        []))
pnull.nonempty program
  1.0.0
  ((\!0 -> case (constr 0 [!1, False, True]) [(force ifThenElse)])
     ((\!0 -> case !1 [(\!0 !0 -> False), True])
        ((\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1)))
           (\!0 !0 ->
              force
                (case
                   (constr 0
                      [ !1
                      , (delay (constr 1 []))
                      , (delay
                           ((\!0 !0 -> constr 0 [!2, !1])
                              (force headList !1)
                              (!2 (force tailList !1)))) ])
                   [(force (force chooseList))]))
           [1,2,3,4,5,6,7,8,9,10])))
pconcat.identity program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            (\!0 ->
               (\!0 ->
                  (\!0 ->
                     (\!0 ->
                        (\!0 ->
                           (\!0 ->
                              (\!0 ->
                                 force
                                   ((\!0 !0 ->
                                       case
                                         (constr 0 [!2, !1, (delay False)])
                                         [!4])
                                      (!1
                                         (!3 (!4 !10) (constr 1 []))
                                         (!3 (constr 1 []) (!4 !10)))
                                      (delay
                                         (!1
                                            (!3 (constr 1 []) (!4 !10))
                                            (!4 !10)))))
                                (!4
                                   (\!0 !0 !0 ->
                                      case
                                        !2
                                        [ (\!0 !0 ->
                                             case
                                               !3
                                               [ (\!0 !0 ->
                                                    force
                                                      (case
                                                         (constr 0
                                                            [ (equalsInteger
                                                                 !4
                                                                 !2)
                                                            , (delay (!7 !3 !1))
                                                            , (delay False) ])
                                                         [!8]))
                                               , False ])
                                        , (case
                                             !1
                                             [(\!0 !0 -> False), True]) ])))
                             (force ifThenElse))
                          (\!0 !0 ->
                             !4
                               (\!0 !0 ->
                                  case !1 [(\!0 !0 -> !10 !2 (!4 !1)), !3])
                               !2))
                       (!1
                          (\!0 !0 ->
                             force
                               (case
                                  (constr 0
                                     [ !1
                                     , (delay (constr 1 []))
                                     , (delay (!5 (!6 !1) (!2 (!7 !1)))) ])
                                  [!4]))))
                    (\!0 ->
                       (\!0 -> !2 (\!0 -> !2 !2 !1))
                         (\!0 -> !2 (\!0 -> !2 !2 !1))))
                 (force (force chooseList)))
              (\!0 !0 -> constr 0 [!2, !1]))
           (force headList))
        (force tailList))
     [1,2,3,4,5,6,7,8,9,10])
pmap.eg program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            (\!0 ->
               (\!0 ->
                  (\!0 ->
                     !2
                       (\!0 !0 !0 ->
                          case
                            !2
                            [ (\!0 !0 ->
                                 case
                                   !3
                                   [ (\!0 !0 ->
                                        force
                                          (case
                                             (constr 0
                                                [ (equalsInteger !4 !2)
                                                , (delay (!7 !3 !1))
                                                , (delay False) ])
                                             [(force ifThenElse)]))
                                   , False ])
                            , (case !1 [(\!0 !0 -> False), True]) ])
                       ((\!0 ->
                           !3
                             (\!0 !0 ->
                                case
                                  !1
                                  [ (\!0 !0 -> !9 (!5 !2) (!4 !1))
                                  , (constr 1 []) ]))
                          (\!0 -> addInteger !1 !1)
                          (!1 [1,2,3,4,5,6,7,8,9,10]))
                       (!1 [2,4,6,8,10,12,14,16,18,20]))
                    (!1
                       (\!0 !0 ->
                          force
                            (case
                               (constr 0
                                  [ !1
                                  , (delay (constr 1 []))
                                  , (delay (!5 (!6 !1) (!2 (!7 !1)))) ])
                               [!4]))))
                 (\!0 ->
                    (\!0 -> !2 (\!0 -> !2 !2 !1))
                      (\!0 -> !2 (\!0 -> !2 !2 !1))))
              (force (force chooseList)))
           (\!0 !0 -> constr 0 [!2, !1]))
        (force headList))
     (force tailList))
pmap.identity program
  1.0.0
  ((\!0 ->
      !1
        (\!0 !0 !0 ->
           case
             !2
             [ (\!0 !0 ->
                  case
                    !3
                    [ (\!0 !0 ->
                         force
                           (case
                              (constr 0
                                 [ (equalsInteger !4 !2)
                                 , (delay (!7 !3 !1))
                                 , (delay False) ])
                              [(force ifThenElse)]))
                    , False ])
             , (case !1 [(\!0 !0 -> False), True]) ])
        ((\!0 ->
            !2
              (\!0 !0 ->
                 case
                   !1
                   [ (\!0 !0 -> (\!0 !0 -> constr 0 [!2, !1]) (!5 !2) (!4 !1))
                   , (constr 1 []) ]))
           (\!0 -> !1)
           (constr 1 []))
        (constr 1 []))
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
pfilter.evens program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            (\!0 ->
               (\!0 ->
                  (\!0 ->
                     (\!0 ->
                        !3
                          (\!0 !0 !0 ->
                             case
                               !2
                               [ (\!0 !0 ->
                                    case
                                      !3
                                      [ (\!0 !0 ->
                                           force
                                             (case
                                                (constr 0
                                                   [ (equalsInteger !4 !2)
                                                   , (delay (!7 !3 !1))
                                                   , (delay False) ])
                                                [!8]))
                                      , False ])
                               , (case !1 [(\!0 !0 -> False), True]) ])
                          ((\!0 ->
                              !4
                                (\!0 !0 ->
                                   case
                                     !1
                                     [ (\!0 !0 ->
                                          force
                                            (case
                                               (constr 0
                                                  [ (!5 !2)
                                                  , (delay (!10 !2 (!4 !1)))
                                                  , (delay (!4 !1)) ])
                                               [!6]))
                                     , (constr 1 []) ]))
                             (\!0 -> equalsInteger (modInteger !1 2) 0)
                             (!2 [1,2,3,4,5,6,7,8,9,10]))
                          (!2 [2,4,6,8,10]))
                       (force ifThenElse))
                    (!1
                       (\!0 !0 ->
                          force
                            (case
                               (constr 0
                                  [ !1
                                  , (delay (constr 1 []))
                                  , (delay (!5 (!6 !1) (!2 (!7 !1)))) ])
                               [!4]))))
                 (\!0 ->
                    (\!0 -> !2 (\!0 -> !2 !2 !1))
                      (\!0 -> !2 (\!0 -> !2 !2 !1))))
              (force (force chooseList)))
           (\!0 !0 -> constr 0 [!2, !1]))
        (force headList))
     (force tailList))
pfilter.gt5 program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            (\!0 ->
               (\!0 ->
                  (\!0 ->
                     (\!0 ->
                        !3
                          (\!0 !0 !0 ->
                             case
                               !2
                               [ (\!0 !0 ->
                                    case
                                      !3
                                      [ (\!0 !0 ->
                                           force
                                             (case
                                                (constr 0
                                                   [ (equalsInteger !4 !2)
                                                   , (delay (!7 !3 !1))
                                                   , (delay False) ])
                                                [!8]))
                                      , False ])
                               , (case !1 [(\!0 !0 -> False), True]) ])
                          ((\!0 ->
                              !4
                                (\!0 !0 ->
                                   case
                                     !1
                                     [ (\!0 !0 ->
                                          force
                                            (case
                                               (constr 0
                                                  [ (!5 !2)
                                                  , (delay (!10 !2 (!4 !1)))
                                                  , (delay (!4 !1)) ])
                                               [!6]))
                                     , (constr 1 []) ]))
                             (\!0 -> lessThanInteger 5 !1)
                             (!2 [1,2,3,4,5,6,7,8,9,10]))
                          (!2 [6,7,8,9,10]))
                       (force ifThenElse))
                    (!1
                       (\!0 !0 ->
                          force
                            (case
                               (constr 0
                                  [ !1
                                  , (delay (constr 1 []))
                                  , (delay (!5 (!6 !1) (!2 (!7 !1)))) ])
                               [!4]))))
                 (\!0 ->
                    (\!0 -> !2 (\!0 -> !2 !2 !1))
                      (\!0 -> !2 (\!0 -> !2 !2 !1))))
              (force (force chooseList)))
           (\!0 !0 -> constr 0 [!2, !1]))
        (force headList))
     (force tailList))
pzipWith.double program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            (\!0 ->
               (\!0 ->
                  (\!0 ->
                     (\!0 ->
                        !3
                          (\!0 !0 !0 ->
                             case
                               !2
                               [ (\!0 !0 ->
                                    case
                                      !3
                                      [ (\!0 !0 ->
                                           force
                                             (case
                                                (constr 0
                                                   [ (equalsInteger !4 !2)
                                                   , (delay (!7 !3 !1))
                                                   , (delay False) ])
                                                [(force ifThenElse)]))
                                      , False ])
                               , (case !1 [(\!0 !0 -> False), True]) ])
                          (case
                             (constr 0
                                [ (\!0 !0 !0 ->
                                     case
                                       !2
                                       [ (\!0 !0 ->
                                            case
                                              !3
                                              [ (\!0 !0 ->
                                                   !12
                                                     (addInteger !4 !2)
                                                     (!7 !3 !1))
                                              , (constr 1 []) ])
                                       , (constr 1 []) ])
                                , (!2 !1)
                                , (!2 !1) ])
                             [!3])
                          (!2 [2,4,6,8,10,12,14,16,18,20]))
                       [1,2,3,4,5,6,7,8,9,10])
                    (!1
                       (\!0 !0 ->
                          force
                            (case
                               (constr 0
                                  [ !1
                                  , (delay (constr 1 []))
                                  , (delay (!5 (!6 !1) (!2 (!7 !1)))) ])
                               [!4]))))
                 (\!0 ->
                    (\!0 -> !2 (\!0 -> !2 !2 !1))
                      (\!0 -> !2 (\!0 -> !2 !2 !1))))
              (force (force chooseList)))
           (\!0 !0 -> constr 0 [!2, !1]))
        (force headList))
     (force tailList))
pfoldl.nonempty program
  1.0.0
  ((\!0 ->
      equalsInteger
        (!1
           (\!0 !0 !0 ->
              case !1 [(\!0 !0 -> !5 (subtractInteger !4 !2) !1), !2])
           0
           (!1
              (\!0 !0 ->
                 force
                   (case
                      (constr 0
                         [ !1
                         , (delay (constr 1 []))
                         , (delay
                              ((\!0 !0 -> constr 0 [!2, !1])
                                 (force headList !1)
                                 (!2 (force tailList !1)))) ])
                      [(force (force chooseList))]))
              [1,2,3,4,5,6,7,8,9,10]))
        -55)
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
pfoldl.nonempty-primed program
  1.0.0
  ((\!0 ->
      equalsInteger
        (!1
           (\!0 !0 !0 ->
              case !1 [(\!0 !0 -> !5 (subtractInteger !4 !2) !1), !2])
           0
           (!1
              (\!0 !0 ->
                 force
                   (case
                      (constr 0
                         [ !1
                         , (delay (constr 1 []))
                         , (delay
                              ((\!0 !0 -> constr 0 [!2, !1])
                                 (force headList !1)
                                 (!2 (force tailList !1)))) ])
                      [(force (force chooseList))]))
              [1,2,3,4,5,6,7,8,9,10]))
        -55)
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
pfoldl.empty program
  1.0.0
  ((\!0 ->
      equalsInteger
        (!1
           (\!0 !0 !0 ->
              case !1 [(\!0 !0 -> !5 (subtractInteger !4 !2) !1), !2])
           0
           (!1
              (\!0 !0 ->
                 force
                   (case
                      (constr 0
                         [ !1
                         , (delay (constr 1 []))
                         , (delay
                              ((\!0 !0 -> constr 0 [!2, !1])
                                 (force headList !1)
                                 (!2 (force tailList !1)))) ])
                      [(force (force chooseList))]))
              []))
        0)
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
pfoldl.empty-primed program
  1.0.0
  ((\!0 ->
      equalsInteger
        (!1
           (\!0 !0 !0 ->
              case !1 [(\!0 !0 -> !5 (subtractInteger !4 !2) !1), !2])
           0
           (!1
              (\!0 !0 ->
                 force
                   (case
                      (constr 0
                         [ !1
                         , (delay (constr 1 []))
                         , (delay
                              ((\!0 !0 -> constr 0 [!2, !1])
                                 (force headList !1)
                                 (!2 (force tailList !1)))) ])
                      [(force (force chooseList))]))
              []))
        0)
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
elemAt.elemAt_3_[1..10] program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            force
              (case
                 (constr 0
                    [ (lessThanInteger 3 0)
                    , (delay
                         (force
                            (force trace
                               "pelemAt: negative index"
                               (delay error))))
                    , (delay
                         (!3
                            (\!0 !0 !0 ->
                               force
                                 (case
                                    (constr 0
                                       [ (equalsInteger !2 0)
                                       , (delay
                                            (case !1 [(\!0 !0 -> !2), error]))
                                       , (delay
                                            (!3
                                               (subtractInteger !2 1)
                                               (case
                                                  !1
                                                  [(\!0 !0 -> !1), error]))) ])
                                    [!5]))
                            3
                            !1)) ])
                 [!2]))
           (!2
              (\!0 !0 ->
                 force
                   (case
                      (constr 0
                         [ !1
                         , (delay (constr 1 []))
                         , (delay
                              ((\!0 !0 -> constr 0 [!2, !1])
                                 (force headList !1)
                                 (!2 (force tailList !1)))) ])
                      [(force (force chooseList))]))
              [1,2,3,4,5,6,7,8,9,10]))
        (force ifThenElse))
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
elemAt.elemAt_0_[1..10] program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            force
              (case
                 (constr 0
                    [ (lessThanInteger 0 0)
                    , (delay
                         (force
                            (force trace
                               "pelemAt: negative index"
                               (delay error))))
                    , (delay
                         (!3
                            (\!0 !0 !0 ->
                               force
                                 (case
                                    (constr 0
                                       [ (equalsInteger !2 0)
                                       , (delay
                                            (case !1 [(\!0 !0 -> !2), error]))
                                       , (delay
                                            (!3
                                               (subtractInteger !2 1)
                                               (case
                                                  !1
                                                  [(\!0 !0 -> !1), error]))) ])
                                    [!5]))
                            0
                            !1)) ])
                 [!2]))
           (!2
              (\!0 !0 ->
                 force
                   (case
                      (constr 0
                         [ !1
                         , (delay (constr 1 []))
                         , (delay
                              ((\!0 !0 -> constr 0 [!2, !1])
                                 (force headList !1)
                                 (!2 (force tailList !1)))) ])
                      [(force (force chooseList))]))
              [1,2,3,4,5,6,7,8,9,10]))
        (force ifThenElse))
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
elemAt.elemAt_9_[1..10] program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            force
              (case
                 (constr 0
                    [ (lessThanInteger 9 0)
                    , (delay
                         (force
                            (force trace
                               "pelemAt: negative index"
                               (delay error))))
                    , (delay
                         (!3
                            (\!0 !0 !0 ->
                               force
                                 (case
                                    (constr 0
                                       [ (equalsInteger !2 0)
                                       , (delay
                                            (case !1 [(\!0 !0 -> !2), error]))
                                       , (delay
                                            (!3
                                               (subtractInteger !2 1)
                                               (case
                                                  !1
                                                  [(\!0 !0 -> !1), error]))) ])
                                    [!5]))
                            9
                            !1)) ])
                 [!2]))
           (!2
              (\!0 !0 ->
                 force
                   (case
                      (constr 0
                         [ !1
                         , (delay (constr 1 []))
                         , (delay
                              ((\!0 !0 -> constr 0 [!2, !1])
                                 (force headList !1)
                                 (!2 (force tailList !1)))) ])
                      [(force (force chooseList))]))
              [1,2,3,4,5,6,7,8,9,10]))
        (force ifThenElse))
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
find.find_(==3)_[1..4] program
  1.0.0
  ((\!0 ->
      !1
        (\!0 !0 !0 ->
           case
             !1
             [ (\!0 !0 ->
                  force
                    (case
                       (constr 0
                          [ (!4 !2)
                          , (delay (constr 0 [!2]))
                          , (delay (!5 !4 !1)) ])
                       [(force ifThenElse)]))
             , (constr 1 []) ])
        (\!0 -> equalsInteger !1 3)
        (!1
           (\!0 !0 ->
              force
                (case
                   (constr 0
                      [ !1
                      , (delay (constr 1 []))
                      , (delay
                           ((\!0 !0 -> constr 0 [!2, !1])
                              (force headList !1)
                              (!2 (force tailList !1)))) ])
                   [(force (force chooseList))]))
           [1,2,3,4]))
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
find.find_(==5)_[1..4] program
  1.0.0
  ((\!0 ->
      !1
        (\!0 !0 !0 ->
           case
             !1
             [ (\!0 !0 ->
                  force
                    (case
                       (constr 0
                          [ (!4 !2)
                          , (delay (constr 0 [!2]))
                          , (delay (!5 !4 !1)) ])
                       [(force ifThenElse)]))
             , (constr 1 []) ])
        (\!0 -> equalsInteger !1 5)
        (!1
           (\!0 !0 ->
              force
                (case
                   (constr 0
                      [ !1
                      , (delay (constr 1 []))
                      , (delay
                           ((\!0 !0 -> constr 0 [!2, !1])
                              (force headList !1)
                              (!2 (force tailList !1)))) ])
                   [(force (force chooseList))]))
           [1,2,3,4]))
     (\!0 -> (\!0 -> !2 (\!0 -> !2 !2 !1)) (\!0 -> !2 (\!0 -> !2 !2 !1))))
x1+x2.builtin program
  1.0.0
  ((\!0 ->
      (\!0 -> addInteger (!1 (force tailList !2)) (!1 !2)) (force headList))
     [1,2,3,4,5])
x1+x2.pmatch program
  1.0.0
  ((\!0 ->
      (\!0 ->
         (\!0 ->
            force
              (case
                 (constr 0
                    [ !3
                    , (delay error)
                    , (delay
                         ((\!0 ->
                             force
                               (case
                                  (constr 0
                                     [ !1
                                     , (delay error)
                                     , (delay (addInteger (!3 !4) (!3 !1))) ])
                                  [!2]))
                            (force tailList !3))) ])
                 [!1]))
           (force (force chooseList)))
        (force headList))
     [1,2,3,4,5])
uncons.ChooseList program
  1.0.0
  ((\!0 ->
      force
        (case
           (constr 0 [!1, (delay error), (delay (force tailList !1))])
           [(force (force chooseList))]))
     [1,2,3,4,5])
uncons.head-and-tail program
  1.0.0
  ((\!0 -> (\!0 -> force tailList !2) (force headList !1)) [1,2,3,4,5])
uncons.head-and-tail-and-null program
  1.0.0
  ((\!0 ->
      (\!0 ->
         force
           (case
              (constr 0
                 [ !1
                 , (delay error)
                 , (delay ((\!0 -> force tailList !3) (force headList !2))) ])
              [(force ifThenElse)]))
        (force nullList !1))
     [1,2,3,4,5])
