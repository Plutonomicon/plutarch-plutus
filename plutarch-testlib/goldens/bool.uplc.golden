pnot.lam program 1.0.0 (\!0 -> case (constr 0 [!1, False, True]) [(force ifThenElse)])
pnot.app program 1.0.0 (case (constr 0 [True, False, True]) [(force ifThenElse)])
pand.tf program
  1.0.0
  (force
     ((\!0 -> case (constr 0 [True, !1, (delay False)]) [(force ifThenElse)])
        (delay False)))
pand.ft program
  1.0.0
  (force
     ((\!0 -> case (constr 0 [False, !1, (delay False)]) [(force ifThenElse)])
        (delay True)))
pand.tt program
  1.0.0
  (force
     ((\!0 -> case (constr 0 [True, !1, (delay False)]) [(force ifThenElse)])
        (delay True)))
pand.ff program
  1.0.0
  (force
     ((\!0 -> case (constr 0 [False, !1, (delay False)]) [(force ifThenElse)])
        (delay False)))
pand.laziness.pand program
  1.0.0
  ((\!0 -> case (constr 0 [False, !1, (delay False)]) [(force ifThenElse)])
     (delay error))
pand.laziness.op program
  1.0.0
  (force
     ((\!0 -> case (constr 0 [False, !1, (delay False)]) [(force ifThenElse)])
        (delay error)))
pand.laziness.pand.perror.op program
  1.0.0
  (force
     ((\!0 -> case (constr 0 [True, !1, (delay False)]) [(force ifThenElse)])
        (delay error)))
por.tf program 1.0.0 (force (force ifThenElse True (delay True) (delay False)))
por.ft program 1.0.0 (force (force ifThenElse False (delay True) (delay True)))
por.tt program 1.0.0 (force (force ifThenElse True (delay True) (delay True)))
por.ff program 1.0.0 (force (force ifThenElse False (delay True) (delay False)))
por.laziness.por program 1.0.0 (force ifThenElse True (delay True) (delay error))
por.laziness.op program 1.0.0 (force (force ifThenElse True (delay True) (delay error)))
por.laziness.pand.perror.op.true program 1.0.0 (force (force ifThenElse True (delay True) (delay error)))
por.laziness.pand.perror.op.false program 1.0.0 (force (force ifThenElse False (delay True) (delay error)))
pcond.direct-1 program 1.0.0 1
pcond.pcond-1 program 1.0.0 1
pcond.direct-2 program
  1.0.0
  (force
     (case
        (constr 0 [(lessThanInteger 1 2), (delay 1), (delay 2)])
        [(force ifThenElse)]))
pcond.pcond-2 program
  1.0.0
  (force
     (case
        (constr 0 [(lessThanInteger 1 2), (delay 1), (delay 2)])
        [(force ifThenElse)]))
pcond.direct-3 program
  1.0.0
  ((\!0 ->
      force
        (case
           (constr 0
              [ (lessThanInteger 1 2)
              , (delay 1)
              , (delay
                   (force
                      (case
                         (constr 0
                            [(lessThanInteger 2 3), (delay 2), (delay 3)])
                         [!1]))) ])
           [!1]))
     (force ifThenElse))
pcond.pcond-3 program
  1.0.0
  ((\!0 ->
      force
        (case
           (constr 0
              [ (lessThanInteger 1 2)
              , (delay 1)
              , (delay
                   (force
                      (case
                         (constr 0
                            [(lessThanInteger 2 3), (delay 2), (delay 3)])
                         [!1]))) ])
           [!1]))
     (force ifThenElse))
